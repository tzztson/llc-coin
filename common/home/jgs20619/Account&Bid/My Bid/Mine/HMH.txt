-Tell me about yourself!
Hello, my name is Jason Saing.
Thanks for giving me opportunity to introduce myself.
As you know, I am a Full-Stack Web developer from Singapore.
I graduated from NUS (National University of Singapore) and majored in Computer Engineering.
And for past 6 years, I have worked as a Full-Stack developer for IT companies as like 'GLOBAL ENTERPRISE MOBILITY' and 'UBITUS INC'.
During that time, I have mainly used the latest technology stack including React, Next.js, TypeScript, Tailwind CSS on the Front-end and Node.js, Nest.js, Python, ExpressJS, Django, Ruby on Rails on the Back-end.
I specialized in developing web applications such as e-commerce systems, enterprise apps, SPA(single page applications), healthcare systems, and learning management systems.
And I used to work in a distributed environment with remote clients using agile methodologies.
Also, I am a Senior Blockchain Engineer.
I have 3 years of experience in Blockchain development.
In the meanwhile, I have acquired enough knowledge about Crypto Tokens, Smart Contracts, NFT Marketplaces, Bitcoin and Ethereum, and Trading bots.
And I developed many NFT marketplaces and you can check it out here.
https://cryptotrunks.co/
I have worked on the Front-end in this position.
I used React.js, TypeScript, and Tailwind CSS for the NFT marketplace  development.
The Wallet-integration was completed using Web3.js and Ehter.js.
For Wallet-integration, I completed integration to Metamask working on binance Smart Chain Network.
So I have rich experience in Blockchain, Smart Contract, Solidity, Turffle, NFTs, and Web3.js.
Due to Covid-19, I didn't have any method but except to retired in these companies earlier, and now I am working as a Full-Stack Web developer on Upwork since last April.

-Why are you interested in this job?
This job position seems like a great fit for me.
When a friend forwarded me this job description, I really excited the fact I can be a right man for this role, so I decided I should apply.
Actually, this is my ideal position because I am really familiar with all stacks for this role.
As I mentioned  is my primary skill.
-Why should we hire you?
I'm a perfect fit for this job because I have rich experience in web development using {React}.
And I can work your time zone and my budget is also within the limits you setting.

-What salary do you expect to earn?
I’ll need information about the job responsibilities before we can discuss the salary.
And I’m sure that your company offers a fair, competitive salary for someone with my experience.
I think my salary expectations are in line with my qualifications and education.
-Is there anything else you’d like to discuss?
How soon do you expect to make a decision?

-Skill Q & A-

1. What is React?
React is a front-end and open-source JavaScript library which is useful in developing user interfaces specifically for applications with a single page. It is helpful in building complex and reusable user interface(UI) components of mobile and web applications as it follows the component-based approach.
The important features of React are:
~It supports server-side rendering.
~It will make use of the virtual DOM rather than real DOM (Data Object Model) as RealDOM manipulations are expensive.
~It follows unidirectional data binding or data flow.
~It uses reusable or composable UI components for developing the view.

2. What are the advantages of using React?
MVC is generally abbreviated as Model View Controller.
~Use of Virtual DOM to improve efficiency: React uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.
~Gentle learning curve: React has a gentle learning curve when compared to frameworks like Angular. Anyone with little knowledge of javascript can start building web applications using React.
~SEO friendly: React allows developers to develop engaging user interfaces that can be easily navigated in various search engines. It also allows server-side rendering, which boosts the SEO of an app.
~Reusable components: React uses component-based architecture for developing applications. Components are independent and reusable bits of code. These components can be shared across various applications having similar functionality. The re-use of components increases the pace of development.
~Huge ecosystem of libraries to choose from: React provides you with the freedom to choose the tools, libraries, and architecture for developing an application based on your requirement.

3. What are the limitations of React?
The few limitations of React are as given below:
~React is not a full-blown framework as it is only a library.
~The components of React are numerous and will take time to fully grasp the benefits of all.
~It might be difficult for beginner programmers to understand React.
~Coding might become complex as it will make use of inline templating and JSX.

4. What is useState() in React?

The useState() is a built-in React Hook that allows you for having state variables in functional components. It should be used when the DOM has something that is dynamically manipulating/controlling.

5. What is JSX?

JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).

6. What are props in React?

The props in React are the inputs to a component of React. They can be single-valued or objects having a set of values that will be passed to components of React during creation by using a naming convention that almost looks similar to HTML-tag attributes. We can say that props are the data passed from a parent component into a child component.

7. What is prop drilling in React?

Sometimes while developing React applications, there is a need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. To pass data between such components, we pass props from a source component and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.

8. What is React Hooks?

React Hooks are the built-in functions that permit developers for using the state and lifecycle methods within React components. These are newly added features made available in React 16.8 version. Each lifecycle of a component is having 3 phases which include mount, unmount, and update. Along with that, components have properties and states. Hooks will allow using these methods by developers for improving the reuse of code with higher flexibility navigating the component tree.
Using Hook, all features of React can be used without writing class components. For example, before React version 16.8, it required a class component for managing the state of a component. But now using the useState hook, we can keep the state in a functional component.

9. What is the use of useEffect React Hooks?

The useEffect React Hook is used for performing the side effects in functional components. With the help of useEffect, you will inform React that your component requires something to be done after rendering the component or after a state change. The function you have passed(can be referred to as “effect”) will be remembered by React and call afterwards the performance of DOM updates is over. Using this, we can perform various calculations such as data fetching, setting up document title, manipulating DOM directly, etc, that don’t target the output value. The useEffect hook will run by default after the first render and also after each update of the component. React will guarantee that the DOM will be updated by the time when the effect has run by it.

10. Why do React Hooks make use of refs?

Earlier, refs were only limited to class components but now it can also be accessible in function components through the useRef Hook in React.

11. What are Custom Hooks?

A Custom Hook is a function in Javascript whose name begins with ‘use’ and which calls other hooks. It is a part of React v16.8 hook update and permits you for reusing the stateful logic without any need for component hierarchy restructuring.

12. Explain Strict Mode in React.
StrictMode is a tool added in version 16.3 of React to highlight potential problems in an application. It performs additional checks on the application.

13. What are the different ways to style a React component?
There are many different ways through which one can style a React component. Some of the ways are :
~Inline Styling: We can directly style an element using inline style attributes. Make sure the value of style is a JavaScript object:
~Using JavaScript object: We can create a separate JavaScript object and set the desired style properties. This object can be used as the value of the inline style attribute.
~CSS Modules: We can create a separate CSS module and import this module inside our component. Create a file with “.module.css”‘ extension, styles.module.css:

14. What are Higher Order Components?
Simply put, Higher-Order Component(HOC) is a function that takes in a component and returns a new component. 

15. What is React Router?
React Router refers to the standard library used for routing in React. It permits us for building a single-page web application in React with navigation without even refreshing the page when the user navigates. It also allows to change the browser URL and will keep the user interface in sync with the URL. React Router will make use of the component structure for calling the components, using which appropriate information can be shown. Since React is a component-based framework, it’s not necessary to include and use this package. Any other compatible routing library would also work with React.

16. Can React Hook replaces Redux?
The React Hook cannot be considered as a replacement for Redux (It is an open-source, JavaScript library useful in managing the application state) when it comes to the management of the global application state tree in large complex applications, even though the React will provide a useReducer hook that manages state transitions similar to Redux. Redux is very useful at a lower level of component hierarchy to handle the pieces of a state which are dependent on each other, instead of a declaration of multiple useState hooks.